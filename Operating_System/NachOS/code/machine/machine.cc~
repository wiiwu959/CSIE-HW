// machine.cc 
//	Routines for simulating the execution of user programs.
//
//  DO NOT CHANGE -- part of the machine emulation
//
// Copyright (c) 1992-1996 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "machine.h"
#include "main.h"

// Textual names of the exceptions that can be generated by user program
// execution, for debugging.
static char* exceptionNames[] = { "no exception", "syscall", 
				"page fault/no TLB entry", "page read only",
				"bus error", "address error", "overflow",
				"illegal instruction" };

//----------------------------------------------------------------------
// CheckEndian
// 	Check to be sure that the host really uses the format it says it 
//	does, for storing the bytes of an integer.  Stop on error.
//----------------------------------------------------------------------

static
void CheckEndian()
{
    union checkit {
        char charword[4];
        unsigned int intword;
    } check;

    check.charword[0] = 1;
    check.charword[1] = 2;
    check.charword[2] = 3;
    check.charword[3] = 4;

#ifdef HOST_IS_BIG_ENDIAN
    ASSERT (check.intword == 0x01020304);
#else
    ASSERT (check.intword == 0x04030201);
#endif
}

//----------------------------------------------------------------------
// Machine::Machine
// 	Initialize the simulation of user program execution.
//
//	"debug" -- if TRUE, drop into the debugger after each user instruction
//		is executed.
//----------------------------------------------------------------------

Machine::Machine(bool debug)
{
    // int i;

    // for (i = 0; i < NumTotalRegs; i++)
    //     registers[i] = 0;
    // mainMemory = new char[MemorySize];
    // for (i = 0; i < MemorySize; i++)
    //   	mainMemory[i] = 0;

    int i;
    usedPhyPageNum = 0;
    LRUstack = new list<int>;
    FIFOqueue = new list<int>;
    
    for (i = 0; i < NumTotalRegs; i++)
        registers[i] = 0;
    mainMemory = new char[MemorySize];
    for (i = 0; i < MemorySize; i++)
            mainMemory[i] = 0;
    
    // 創造一個page table並初始化
    pageTable = new TranslationEntry[NumPhysPages];
    tlb = NULL;
    for(i = 0 ;i < NumPhysPages; i++)
    {
        pageTable[i].valid = FALSE;
        pageTable[i].use = FALSE;
        pageTable[i].dirty = FALSE;
        pageTable[i].readOnly = FALSE; 
    }

#ifdef USE_TLB
    tlb = new TranslationEntry[TLBSize];
    for (i = 0; i < TLBSize; i++)
	tlb[i].valid = FALSE;
    pageTable = NULL;
#else	// use linear page table
    tlb = NULL;
    pageTable = NULL;
#endif

    singleStep = debug;
    CheckEndian();
}

//----------------------------------------------------------------------
// Machine::~Machine
// 	De-allocate the data structures used to simulate user program execution.
//----------------------------------------------------------------------

Machine::~Machine()
{
    delete [] mainMemory;
    if (tlb != NULL)
        delete [] tlb;
}

//----------------------------------------------------------------------
// Machine::RaiseException
// 	Transfer control to the Nachos kernel from user mode, because
//	the user program either invoked a system call, or some exception
//	occured (such as the address translation failed).
//
//	"which" -- the cause of the kernel trap
//	"badVaddr" -- the virtual address causing the trap, if appropriate
//----------------------------------------------------------------------

void
Machine::RaiseException(ExceptionType which, int badVAddr)
{
    DEBUG(dbgMach, "Exception: " << exceptionNames[which]);
    
    registers[BadVAddrReg] = badVAddr;
    DelayedLoad(0, 0);			// finish anything in progress
    kernel->interrupt->setStatus(SystemMode);
//	cout << "entering system mode...\n";
    ExceptionHandler(which);		// interrupts are enabled at this point
    kernel->interrupt->setStatus(UserMode);
//	cout << "entering user mode...\n";
}

//----------------------------------------------------------------------
// Machine::Debugger
// 	Primitive debugger for user programs.  Note that we can't use
//	gdb to debug user programs, since gdb doesn't run on top of Nachos.
//	It could, but you'd have to implement *a lot* more system calls
//	to get it to work!
//
//	So just allow single-stepping, and printing the contents of memory.
//----------------------------------------------------------------------

void Machine::Debugger()
{
    char *buf = new char[80];
    int num;

    kernel->interrupt->DumpState();
    DumpState();
    cout << kernel->stats->totalTicks << ">";
    cin.get(buf, 80, '\n');
    if (sscanf(buf, "%d", &num) == 1)
	runUntilTime = num;
    else {
	runUntilTime = 0;
	switch (*buf) {
	  case '\n':
	    break;
	    
	  case 'c':
	    singleStep = FALSE;
	    break;
	    
	  case '?':
	    cout << "Machine commands:\n";
	    cout << "    <return>  execute one instruction\n";
	    cout << "    <number>  run until the given timer tick\n";
	    cout << "    c         run until completion\n";
	    cout << "    ?         print help message\n";
	    break;
	}
    }
    delete [] buf;
}
 
//----------------------------------------------------------------------
// Machine::DumpState
// 	Print the user program's CPU state.  We might print the contents
//	of memory, but that seemed like overkill.
//----------------------------------------------------------------------

void
Machine::DumpState()
{
    int i;
    
    cout << "Machine registers:\n";
    for (i = 0; i < NumGPRegs; i++) {
	switch (i) {
	  case StackReg:
	    cout << "\tSP(" << i << "):\t" << registers[i];
	    break;
	    
	  case RetAddrReg:
	    cout << "\tRA(" << i << "):\t" << registers[i];
	    break;
	  
	  default:
	    cout << "\t" << i << ":\t" << registers[i];
	    break;
	}
	if ((i % 4) == 3) { cout << "\n"; }
    }
    
    cout << "\tHi:\t" << registers[HiReg];
    cout << "\tLo:\t" << registers[LoReg];
    cout << "\tPC:\t" << registers[PCReg];
    cout << "\tNextPC:\t" << registers[NextPCReg];
    cout << "\tPrevPC:\t" << registers[PrevPCReg];
    cout << "\tLoad:\t" << registers[LoadReg];
    cout << "\tLoadV:\t" << registers[LoadValueReg] << "\n";
}

//----------------------------------------------------------------------
// Machine::ReadRegister/WriteRegister
//   	Fetch or write the contents of a user program register.
//----------------------------------------------------------------------

int 
Machine::ReadRegister(int num)
{
    ASSERT((num >= 0) && (num < NumTotalRegs));
    return registers[num];
}

void 
Machine::WriteRegister(int num, int value)
{
    ASSERT((num >= 0) && (num < NumTotalRegs));
    registers[num] = value;
}

TranslationEntry* Machine::FindPage(unsigned int vpn,unsigned *pageframe)
{
for(unsigned i=0;i<NumPhysPages;i++)
    {
        if(!pageTable[i].valid)                           //當找到某Physical page的valid為不能使用時
        {
            kernel->stats->numPageFaults++;               //紀錄PageFaults次數
            SwapIn(vpn,i);                                //目標 Page 直接Swap到此Physical Page的位址
            *pageframe=i;                                                 //替換Page
            pageTable[i].pid=kernel->currentThread->getPid();             //替換Page，紀錄PID
            pageTable[i].virtualPage=vpn;                                            //替換Page
            pageTable[i].valid=TRUE;                                //紀錄為可使用
            FIFOqueue->Append(i);                                                       //調整FIFO順序，第一位踢出，
            //存入目標Page後存入最後
            LRUstack->Append(i);                                                        //調整LRU順序，將在最底下，
            //也就是最久沒用的Page踢出，存入
            //目標Page後放入最上層
            return &pageTable[i];                                                            //回傳目標Page在mainMemory所在的位址
       }
       else if(pageTable[i].valid &&  (pageTable[i].pid==kernel->currentThread->getPid()) 
                && (pageTable[i].virtualPage==vpn))                  //如果找到目標Page並且可以用
       { 
            LRUstack->Remove(i);                                                            //把目標Page提至最上層
            LRUstack->Append(i);
            *pageframe = i;            
            return &pageTable[i];                                                                //回傳目標Page在mainMemory中所在的位址
       } 
   }
   return NULL;
}


//      將Page page從VirtualMemory移到 PhysicalMemory

void Machine::SwapIn(unsigned int virtPage,unsigned int physPage)
{
        unsigned int sectorNum;
        char *DATAbuffer;
        DATAbuffer = new char[PageSize];
        sectorNum = kernel->currentThread->space->VMemSpace[virtPage];
        kernel->virtualMemory->ReadSector(sectorNum,DATAbuffer);        //讀取硬碟的DATAbuffer
        bcopy(DATAbuffer,&mainMemory[physPage*PageSize],PageSize); //讀入到Physical memory
}

 

//      將Page DATAbuffer從Physical Memory 移到Virtual Memory
void Machine::SwapOut(unsigned int physPage,unsigned int virtPage)
{
        unsigned int sectorNum;
        char *DATAbuffer;
        DATAbuffer = new char[PageSize];
        if(pageTable[physPage].pid == kernel->currentThread->getPid() )
        {
            DATAbuffer=new char[PageSize];
            bcopy(&mainMemory[physPage*PageSize],DATAbuffer,PageSize);  //把Main Memory的資料讀取出來
            sectorNum=kernel->currentThread->space->VMemSpace[virtPage];
            kernel->virtualMemory->WriteSector(sectorNum,DATAbuffer);         //把DATAbuffer寫入硬碟
        }
}
